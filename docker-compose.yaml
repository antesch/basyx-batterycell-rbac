version: '3.8'

services:
  keycloak:
    build:
      context: ./keycloak
      dockerfile: Dockerfile
      args:
        HTTP_PROXY: ${HTTP_PROXY}
        HTTPS_PROXY: ${HTTPS_PROXY}
    container_name: keycloak
    environment:
      HOSTNAME: ${HOSTNAME}
      PORT: ${PORT}
      WEB_UI_BASE_PATH: ${WEB_UI_BASE_PATH}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_PROXY: ${KC_PROXY}
      jgroups_dns_query: keycloak
      PROXY_ADDRESS_FORWARDING: ${PROXY_ADDRESS_FORWARDING}
      KC_HEALTH_ENABLED: ${KC_HEALTH_ENABLED}
      KC_METRICS_ENABLED: ${KC_METRICS_ENABLED}
      KC_HTTP_ENABLED: ${KC_HTTP_ENABLED}
      KC_HTTP_RELATIVE_PATH: ${KC_HTTP_RELATIVE_PATH}
      KC_HOSTNAME_URL: ${KC_HOSTNAME_URL}
      KC_HOSTNAME_ADMIN_URL: ${KC_HOSTNAME_ADMIN_URL}
      KEYCLOAK_IMPORT: ${KEYCLOAK_IMPORT}
      KC_SPI_INITIALIZER_ISSUER_BASE_URI: ${KC_SPI_INITIALIZER_ISSUER_BASE_URI}
    command: ["start-dev", "--import-realm", "--health-enabled=true"]
    ports:
      - "9097:8080"
    healthcheck:
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080${KC_HTTP_RELATIVE_PATH}/health/live']
      interval: 5s
      timeout: 5s
      retries: 15
      start_period: 45s
    networks:
      shared-net:
        aliases:
          - keycloak

  nginx:
    container_name: nginx
    build: ./nginx
    environment:
      - HOSTNAME=${HOSTNAME}
      - PORT=${PORT}
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      aas-env:
        condition: service_healthy
    networks:
      shared-net:
        aliases:
          - nginx

  mongo:
    image: mongo:5.0.10
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongoAdmin
      MONGO_INITDB_ROOT_PASSWORD: mongoPassword
    ports:
      - 27017:27017
    networks:
      shared-net:
        aliases:
          - mongo
    healthcheck:
      test: mongo
      interval: 10s
      start_period: 5s
      retries: 5

  aas-env:
    image: eclipsebasyx/aas-environment:${BASYX_VERSION}
    container_name: aas-env
    environment:
      BASYX_EXTERNALURL: ${AAS_ENV_EXTERNAL_URL}
    volumes:
      - ./config/aas-env.properties:/application/application.properties
      - ./config/rules/aas_env_rbac_rules.json:/application/rbac_rules.json
    ports:
      - "8081:8081"
    restart: always
    depends_on:
      aas-registry:
        condition: service_healthy
      sm-registry:
        condition: service_healthy
    networks:
      shared-net:
        aliases:
          - aas-env

  aas-registry:
    image: eclipsebasyx/aas-registry-log-mongodb:${BASYX_VERSION}
    container_name: aas-registry
    ports:
      - "8082:8080"
    environment:
      SERVER_SERVLET_CONTEXT_PATH: /
      BASYX_CORS_ALLOWED_ORIGINS: '*'
      SPRING_DATA_MONGODB_URI: mongodb://mongoAdmin:mongoPassword@mongo:27017/aas-reg?authSource=admin&retryWrites=true&w=majority&readPreference=primaryPreferred
      BASYX_CORS_ALLOWED_METHODS: GET,POST,PATCH,DELETE,PUT,OPTIONS,HEAD
      BASYX_FEATURE_AUTHORIZATION_ENABLED: true
      BASYX_FEATURE_AUTHORIZATION_TYPE: rbac
      BASYX_FEATURE_AUTHORIZATION_JWTBEARERTOKENPROVIDER: keycloak
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/identity-management/realms/D4E
      BASYX_FEATURE_AUTHORIZATION_RBAC_FILE: file:/workspace/config/rbac_rules.json
      BASYX_FEATURE_AUTHORIZATION_RULES_BACKEND: Submodel
      BASYX_FEATURE_AUTHORIZATION_RULES_BACKEND_SUBMODEL_AUTHORIZATION_ENDPOINT: http://security-submodel:8081/submodels/U2VjdXJpdHlTdWJtb2RlbA==
      BASYX_FEATURE_AUTHORIZATION_RULES_BACKEND_SUBMODEL_AUTHORIZATION_TOKEN_ENDPOINT: http://keycloak:8080/identity-management/realms/D4E/protocol/openid-connect/token
      BASYX_FEATURE_AUTHORIZATION_RULES_BACKEND_SUBMODEL_AUTHORIZATION_GRANT_TYPE: CLIENT_CREDENTIALS
      BASYX_FEATURE_AUTHORIZATION_RULES_BACKEND_SUBMODEL_AUTHORIZATION_CLIENT_ID: workstation-1
      BASYX_FEATURE_AUTHORIZATION_RULES_BACKEND_SUBMODEL_AUTHORIZATION_CLIENT_SECRET: nY0mjyECF60DGzNmQUjL81XurSl8etom
    volumes:
      - ./config/rules/aas_registry_rbac_rules.json:/workspace/config/rbac_rules.json
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      security-submodel:
        condition: service_healthy
    networks:
      shared-net:
        aliases:
          - aas-registry

  sm-registry:
    image: eclipsebasyx/submodel-registry-log-mongodb:${BASYX_VERSION}
    container_name: sm-registry
    ports:
      - "8083:8080"
    environment:
      SERVER_SERVLET_CONTEXT_PATH: /
      BASYX_CORS_ALLOWED_ORIGINS: '*'
      SPRING_DATA_MONGODB_URI: mongodb://mongoAdmin:mongoPassword@mongo:27017/sm-reg?authSource=admin&retryWrites=true&w=majority&readPreference=primaryPreferred
      BASYX_CORS_ALLOWED_METHODS: GET,POST,PATCH,DELETE,PUT,OPTIONS,HEAD
      BASYX_FEATURE_AUTHORIZATION_ENABLED: true
      BASYX_FEATURE_AUTHORIZATION_TYPE: rbac
      BASYX_FEATURE_AUTHORIZATION_JWTBEARERTOKENPROVIDER: keycloak
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/identity-management/realms/D4E
      BASYX_FEATURE_AUTHORIZATION_RBAC_FILE: file:/workspace/config/rbac_rules.json
      BASYX_FEATURE_AUTHORIZATION_RULES_BACKEND: Submodel
      BASYX_FEATURE_AUTHORIZATION_RULES_BACKEND_SUBMODEL_AUTHORIZATION_ENDPOINT: http://security-submodel:8081/submodels/U2VjdXJpdHlTdWJtb2RlbA==
      BASYX_FEATURE_AUTHORIZATION_RULES_BACKEND_SUBMODEL_AUTHORIZATION_TOKEN_ENDPOINT: http://keycloak:8080/identity-management/realms/D4E/protocol/openid-connect/token
      BASYX_FEATURE_AUTHORIZATION_RULES_BACKEND_SUBMODEL_AUTHORIZATION_GRANT_TYPE: CLIENT_CREDENTIALS
      BASYX_FEATURE_AUTHORIZATION_RULES_BACKEND_SUBMODEL_AUTHORIZATION_CLIENT_ID: workstation-1
      BASYX_FEATURE_AUTHORIZATION_RULES_BACKEND_SUBMODEL_AUTHORIZATION_CLIENT_SECRET: nY0mjyECF60DGzNmQUjL81XurSl8etom
    volumes:
      - ./config/rules/sm_registry_rbac_rules.json:/workspace/config/rbac_rules.json
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      security-submodel:
        condition: service_healthy
    networks:
      shared-net:
        aliases:
          - sm-registry

  security-submodel:
    image: eclipsebasyx/submodel-repository:${BASYX_VERSION}
    container_name: security-submodel
    volumes:
      - ./config/security-sm.properties:/application/application.properties
      - ./config/rules/sec_sm_rbac_rules.json:/application/rbac_rules.json
    ports:
      - "8089:8081"
    restart: always
    depends_on:
      keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      shared-net:
        aliases:
          - security-submodel

  security-sm-setup:
    container_name: security-sm-setup
    build:
      context: ./submodel-initializer
      dockerfile: Dockerfile
    depends_on:
      security-submodel:
        condition: service_healthy
    restart: "no"
    volumes:
      - ./submodel-initializer/entrypoint.sh:/entrypoint.sh
      - ./submodel-initializer/initial-submodel.json:/initial-submodel.json
    entrypoint: [ "bash", "-c", "sh /entrypoint.sh"]
    networks:
      shared-net:
        aliases:
          - security-sm-setup

  aas-discovery:
    image: eclipsebasyx/aas-discovery:${BASYX_VERSION}
    container_name: aas-discovery
    volumes:
      - ./config/aas-discovery.properties:/application/application.properties
      - ./config/rules/aas_discovery_rbac_rules.json:/application/rbac_rules.json
    ports:
      - "8084:8081"
    restart: always
    networks:
      shared-net:
        aliases:
          - aas-discovery


  aas-web-ui:
    image: eclipsebasyx/aas-gui:${AAS_WEBUI_VERSION}
    container_name: aas-web-ui
    ports:
      - "3000:3000"
    restart: always
    environment:
      BASE_PATH: ${WEB_UI_BASE_PATH}
      AAS_REGISTRY_PATH: ${AAS_REGISTRY_URL}
      SUBMODEL_REGISTRY_PATH: ${SM_REGISTRY_URL}
      AAS_DISCOVERY_PATH: ${DISCOVERY_URL}
      AAS_REPO_PATH: ${AAS_REPO_URL}
      SUBMODEL_REPO_PATH: ${SUBMODEL_REPO_URL}
      CD_REPO_PATH: ${CD_REPO_URL}
      KEYCLOAK_URL: ${KEYCLOAK_URL}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
    depends_on:
      - aas-env
    networks:
      shared-net:
        aliases:
          - aas-web-ui

  production-scheduler:
    container_name: production-scheduler
    build:
      context: ./production-scheduler
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      BASE_URL: http://aas-env:8081
      TOKEN_ENDPOINT: http://keycloak:8080${KC_HTTP_RELATIVE_PATH}/realms/D4E/protocol/openid-connect/token
      CLIENT_ID: workstation-1
      CLIENT_SECRET: nY0mjyECF60DGzNmQUjL81XurSl8etom
      PRODUCTION_DELAY: 5
    restart: always
    depends_on:
      aas-env:
        condition: service_healthy
    networks:
      shared-net:
        aliases:
          - production-scheduler

networks:
  shared-net:
    driver: bridge